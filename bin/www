#!/usr/bin/env node

import http from 'http'
import debug from 'debug'
import app from '../app'

debug('es6-express:server')

const port = normalizePort(process.env.PORT || 3000)
app.set('port', port)

const server = http.createServer(app)

server.listen(port, () => {
  console.log('App is running localy on port: ' + `${port}`)
})
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) {
  let port = (typeof val === 'string') ? parseInt(val, 10) : val

  if (isNaN(port)) return val
  else if (port >= 0) return port
  else return false
}

function onError(error) {
  if (error.syscall !== 'listen') throw error
  
  let bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port
  
  switch(error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  let addr = server.address()
  let bind = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`
  
  debug(`Listening on ${bind}`)
}
